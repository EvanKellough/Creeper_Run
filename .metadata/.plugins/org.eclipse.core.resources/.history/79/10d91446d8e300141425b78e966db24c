package Main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.awt.Toolkit;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.*;
import java.awt.image.*;

import GameState.GameStateManager;

import javax.swing.JPanel;

import GameState.GameStateManager;
import Handlers.Keys;
import Entity.Lighting;


@SuppressWarnings("serial")
public class GamePanel extends JPanel implements Runnable, KeyListener{
	
	
	// dimensions
	public static final int WIDTH = 600;
	public static final int HEIGHT = 350;
	public static final int SCALE = 2;
	
	/*
	 //Original Dimensions
	public static final int WIDTH = SCREENWIDTH;
	public static final int HEIGHT = SCREENHEIGHT;
	public static final int SCALE = 1;
	*/
	
	
	public static final int SCALEDWIDTH = WIDTH * SCALE;
	public static final int SCALEDHEIGHT = HEIGHT * SCALE;
	
	
	/*
	 * LIGHTING VARIABLES VVVVV
	 */
	private static final Color clrHi = new Color(255, 229, 63);
	private static final Color clrLo = new Color(255, 105, 0);
	private static final Color clrGlowInnerHi = new Color(253, 239, 175, 148);
	private static final Color clrGlowInnerLo = new Color(255, 209, 0);
	private static final Color clrGlowOuterHi = new Color(253, 239, 175, 124);
	private static final Color clrGlowOuterLo = new Color(255, 179, 0);
	private int width = GamePanel.SCREENWIDTH();
	private int height = GamePanel.SCREENHEIGHT();
	
	// game thread
	private Thread thread;
	private boolean running;
	private int FPS = 60;
	private long targetTime = 1000 / FPS;
	
	// image
	private BufferedImage image;
	private Graphics2D g;
	
	// game state manager
	private GameStateManager gsm;
	
	// other
	private boolean recording = false;
	private int recordingCount = 0;
	private boolean screenshot;
	public int cx, cy;

		
		//These two methods get the height and width of the screen
		public static int SCREENWIDTH() {
		    return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
		}

		public static int SCREENHEIGHT() {
		    return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;
		}
		
		/*
		public void centergame(){
			
			cx  = ( (SCREENWIDTH() - SCALEDWIDTH) );
			cy =  ( (SCREENHEIGHT() - SCALEDHEIGHT) );
			
			
		}
		*/
		
		public GamePanel() {
		//setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		setPreferredSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize())); //sets panel to size of screen
		setFocusable(true);
		requestFocus();
		
	}
	//Dynamic Lighting
		public static BufferedImage updateLightLevels(BufferedImage img, float light)
		{
		    BufferedImage brightnessBuffer = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);

		    brightnessBuffer.getGraphics().drawImage(img, 0, 0, null);

		    for(int i = 0; i < brightnessBuffer.getWidth(); i++)
		    {
		        for(int a = 0; a < brightnessBuffer.getHeight(); a++)
		        {
		            //get the color at the pixel
		            int rgb = brightnessBuffer.getRGB(i, a);

		            //check to see if it is transparent
		            int alpha = (rgb >> 24) & 0x000000FF;

		            if(alpha != 0)
		            {
		                //make a new color
		                Color rgbColor = new Color(rgb);

		                //turn it into an hsb color
		                float[] hsbCol = Color.RGBtoHSB(rgbColor.getRed(), rgbColor.getGreen(), rgbColor.getBlue(), null);

		                //lower it by the certain amount
		                //if the pixel is already darker then push it all the way to black
		                if(hsbCol[2] <= light)
		                    hsbCol[2] -= (hsbCol[2]) - .01f;
		                else
		                    hsbCol[2] -= light;

		                //turn the hsb color into a rgb color
		                int rgbNew = Color.HSBtoRGB(hsbCol[0], hsbCol[1], hsbCol[2]);

		                //set the pixel to the new color
		                brightnessBuffer.setRGB(i, a, rgbNew);
		            }


		        }
		    }

		    return brightnessBuffer;
		}
		
		
	public void addNotify() {
		super.addNotify();
		if(thread == null) {
			thread = new Thread(this);
			addKeyListener(this);
			thread.start();
		}
	}
	
	private void init() {
		Center();
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		g = (Graphics2D) image.getGraphics();
		/*g.setRenderingHint(
			RenderingHints.KEY_TEXT_ANTIALIASING,
			RenderingHints.VALUE_TEXT_ANTIALIAS_ON
		);*/

		
		running = true;
		
		gsm = new GameStateManager();
		
	}
	
	public void Center(){
		cx  = ( (SCREENWIDTH() - SCALEDWIDTH) / 2 );
		cy =  ( (SCREENHEIGHT() - SCALEDHEIGHT) / 2 );
	}
	
	public int getCx (){
		return cx;
	}
	
	public int getCy (){
		return cy;
	}
	
	public void run() {
		init();
	
		
		/* 
		System.out.println("GAME WIDTH " + WIDTH + " " + HEIGHT);
		System.out.println("SCREEN WIDTH " + SCREENWIDTH() + " " + SCREENHEIGHT());
		System.out.println("SCALED WIDTH " + SCALEDWIDTH + " " + SCALEDHEIGHT);
		System.out.println("CENTERED POINT " + cx + " " + cy);
		*/
		
		long start;
		long elapsed;
		long wait;
		
		// game loop
		while(running) {
			
			start = System.nanoTime();
			
			update();
			draw();
			drawToScreen();
			
			elapsed = System.nanoTime() - start;
			
			wait = targetTime - elapsed / 1000000;
			if(wait < 0) wait = 5;
			
			try {
				Thread.sleep(wait);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
		}
		
	}
	
	private void update() {
		gsm.update();
		Keys.update();
	}
	private void draw() {
		gsm.draw(g);
	}
	private void drawToScreen() {
		Graphics g2 = getGraphics();
		g2.drawImage(image, 0, 0, SCREENWIDTH(), SCREENHEIGHT(), null);
		g2.dispose();
	}
	
	public void keyTyped(KeyEvent key) {}
	public void keyPressed(KeyEvent key) {
		if(key.isControlDown()) {
			if(key.getKeyCode() == KeyEvent.VK_R) {
				recording = !recording;
				return;
			}
			if(key.getKeyCode() == KeyEvent.VK_S) {
				screenshot = true;
				return;
			}
		}
		Keys.keySet(key.getKeyCode(), true);
	}
	public void keyReleased(KeyEvent key) {
		Keys.keySet(key.getKeyCode(), false);
	}

}